local utils = require("doom.utils")
local system = require("doom.core.system")
local core_settings = require("doom.core.settings")
local user_settings = require("doom.core.config.settings")
local enabled_modules = require("doom.core.config.modules").modules
-- `core` is required, doom wouldn't make sense without it.
if not vim.tbl_contains(enabled_modules, "core") then
  table.insert(enabled_modules, "core")
end

local config = {}
local filename = "config.lua"

-- TODO: mv to doom.settings namespace for settings

config.source = nil
config.load = function()
  local first_load = vim.tbl_isempty(doom or {})
  if first_load then
    doom = vim.tbl_deep_extend("force", core_settings, user_settings)
    doom.packages = {}
    doom.autocmds = {}
    doom.binds = {}
    for _, module in ipairs(enabled_modules) do
      local init = require(("doom.modules.%s"):format(module))
      -- TODO: if init ~= nil then doom[module] = init.defaults end
      -- TODO: if module.packages then merge-pack-table end
      doom[module] = init.defaults
      doom.packages = vim.tbl_extend(
        "force",
        doom.packages,
        require(("doom.modules.%s.packages"):format(module))
      )
      doom.autocmds[module] = {}
    end
  end

  dofile(config.source)

  -- autocmds
  for module, _ in pairs(doom.autocmds) do
    local ok, cmds = xpcall(require, debug.traceback, ("doom.modules.%s.autocmds"):format(module))
    if ok then
      for _, cmd in ipairs(cmds) do
        table.insert(doom.autocmds[module], cmd)
      end
    end
  end

  -- binds
  local module_binds = {}
  for _, module in ipairs(enabled_modules) do
    local ok, binds = xpcall(require, debug.traceback, ("doom.modules.%s.binds"):format(module))
    if ok and not vim.tbl_isempty(binds) then
      table.insert(module_binds, binds)
    end
  end
  if not vim.tbl_isempty(module_binds) then
    if not vim.tbl_isempty(doom.binds) then
      doom.binds = { module_binds, doom.binds }
    else
      doom.binds = module_binds
    end
  end

  -- If we shouldn't freeze, remove commit SHAs.
  if not doom.freeze_dependencies then
    for _, spec in pairs(doom.packages) do
      spec.commit = nil
    end
  end

  -- Check plugins updates on start if enabled.
  if doom.check_updates then
    require("doom.core.functions").check_updates()
  end

  -- load vim options
  if first_load then
    dofile(utils.find_config("options.lua", "lua/doom/core"))
  end
end

-- Path cases:
--   1. stdpath('config')/../doom-nvim/config.lua
--   2. stdpath('config')/config.lua
--   3. <runtimepath>/doom-nvim/config.lua
config.source = utils.find_config(filename) -- config.source.user_config

return config

-- vim: fdm=marker
